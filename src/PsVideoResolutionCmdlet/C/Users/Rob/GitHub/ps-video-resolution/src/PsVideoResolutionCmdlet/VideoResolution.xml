<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VideoResolution</name>
    </assembly>
    <members>
        <member name="T:VideoResolution.GetVideoResolutionCmdlet">
            <summary>
            <para type="synopsis">Probe video files for their resolution and output results to host and optionally to log files</para>
            </summary>
            <para type="description">
            Uses ffmpeg (ffprobe) to interrogate video files and retrieve the resolution and file size.
            </para>
            <para type="description">
            Can be run against:
            </para>
            <para type="description">
            > all files in an input directory supplied as an InputDirectory parameter.
            > a file using the File parameter. This can be a file name in the current directory, a relative path,
              a full path, or a file name used in conjunction with the InputDirectory parameter.
            > a collection of files piped into the module (note: this expects correct paths and won't use the InputDirectory
              parameter).
            </para>
            <para type="description">
            Outputs the results to the host in 2 ordered lists, firstly by resolution and secondly by file name.
            </para>
            <para type="description">
            Results can also be output to log and json files if an OutputDirectory is supplied as a parameter.
            A text log file is created that is a duplicate of the standard results written to the host.
            A json file is created with an array representation of the VideoInfo class.
            </para>
            <example>
                <para type="example">Process the supplied file using the current directory</para>
                <code>PS C:\Videos\> Get-VideoResolution -File "ExampleFile.mkv"</code>
            </example>
            <example>
                <para type="example">All files in the supplied input directory, writing json and log files to the supplied output directory.</para>
                <code>PS C:\> Get-VideoResolution -InputDirectory "C:\Videos" -OutputDirectory "C:\Videos\Logs"</code>
            </example>
            <example>
                <para type="example">Process the supplied file using the supplied input directory</para>
                <code>PS C:\Videos\> Get-VideoResolution -File "ExampleFile.mkv" -InputDirectory "C:\Videos"</code>
            </example>
            <example>
                <para type="example">Process the supplied file with path</para>
                <code>PS C:\Videos\> Get-VideoResolution -File "C:\Videos\ExampleFile.mkv"</code>
            </example>
            <example>
                <para type="example">Process the supplied file and return json</para>
                <code>PS C:\Videos\> Get-VideoResolution -File "C:\Videos\ExampleFile.mkv" -Json</code>
            </example>
            <example>
                <para type="example">Process the supplied file and return a PSObject</para>
                <code>PS C:\Videos\> Get-VideoResolution -File "C:\Videos\ExampleFile.mkv" -PSObject</code>
            </example>
            <example>
                <para type="example">Process the piped files array, writing json and log files to the supplied output directory.</para>
                <code>PS C:\> "C:\Videos\ExampleFile1.mkv","C:\Videos\ExampleFile2.mkv" | Get-VideoResolution -OutputDirectory "C:\Videos\Logs"</code>
            </example>
            <para type="notes">
            A check is made to see whether ffmpeg is installed in the environment PATH or in a C:\ffmpeg\bin directory.
            If ffmpeg is not found in either location, the user will be prompted to download ffmpeg which will be saved in the 
            C:\ffmpeg\bin directory.
            </para>
            <para type="link" uri="(https://github.com/trossr32/ps-video-resolution)">[Github]</para>
        </member>
        <member name="P:VideoResolution.GetVideoResolutionCmdlet.InputDirectory">
            <summary>
            <para type="description">
            Optional. If supplied this is the path used to find video files to process. If used in conjunction with the File
            parameter then this path will be joined to the file provided.
            </para>
            </summary>
        </member>
        <member name="P:VideoResolution.GetVideoResolutionCmdlet.OutputDirectory">
            <summary>
            <para type="description">
            Optional. If supplied this is the path used to write text and json data files.
            </para>
            </summary>
        </member>
        <member name="P:VideoResolution.GetVideoResolutionCmdlet.File">
            <summary>
            <para type="description">
            Optional. If supplied this file will be processed. Must be a file in the current directory, a relative path, a full
            path, or a filename used in conjunction with the InputDirectory parameter.
            </para>
            </summary>
        </member>
        <member name="P:VideoResolution.GetVideoResolutionCmdlet.Files">
            <summary>
            <para type="description">
            Optional. Accepted as piped input. If supplied all files in this string array will be processed. Each file must be
            in the current directory, a relative path or a full path. Will be ignored if used in conjunction with the
            InputDirectory parameter.
            </para>
            </summary>
        </member>
        <member name="P:VideoResolution.GetVideoResolutionCmdlet.Recursive">
            <summary>
            <para type="description">
            Optional. If supplied along with an input directory, all sub-directories will also be searched for video files.
            </para>
            </summary>
        </member>
        <member name="P:VideoResolution.GetVideoResolutionCmdlet.Json">
            <summary>
            <para type="description">
            Optional. If supplied json will be returned instead of the standard output.
            </para>
            </summary>
        </member>
        <member name="P:VideoResolution.GetVideoResolutionCmdlet.PSObject">
            <summary>
            <para type="description">
            Optional. If supplied a PsObject will be returned instead of the standard output.
            </para>
            </summary>
        </member>
        <member name="M:VideoResolution.GetVideoResolutionCmdlet.BeginProcessing">
            <summary>
            Implements the <see cref="M:VideoResolution.GetVideoResolutionCmdlet.BeginProcessing"/> method for <see cref="T:VideoResolution.GetVideoResolutionCmdlet"/>.
            Initialise temporary containers
            </summary>
        </member>
        <member name="M:VideoResolution.GetVideoResolutionCmdlet.ProcessRecord">
            <summary>
            Implements the <see cref="M:VideoResolution.GetVideoResolutionCmdlet.ProcessRecord"/> method for <see cref="T:VideoResolution.GetVideoResolutionCmdlet"/>.
            Validates input directory/directories exist and builds a list of directories to process in the EndProcessing method.
            </summary>
        </member>
        <member name="M:VideoResolution.GetVideoResolutionCmdlet.EndProcessing">
            <summary>
            Implements the <see cref="M:VideoResolution.GetVideoResolutionCmdlet.EndProcessing"/> method for <see cref="T:VideoResolution.GetVideoResolutionCmdlet"/>.
            Perform the folder flattening on the configured directories.
            </summary>
        </member>
    </members>
</doc>
